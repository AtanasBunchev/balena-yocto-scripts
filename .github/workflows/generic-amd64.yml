# This is an approximate example of a single Yocto device-type workflow
# as it would exist in a device repo.

# It will be duplicated across all device repos with only minor changes
# to the inputs and the defaults.

# TODO: We need a system to keep these inputs aligned across all device repos
name: Generic x86_64 (GPT)

on:
  # With these triggers the Yocto jobs will run
  # in parallel with the Flowzone jobs, which is fine for now
  # and allows us to better control what we want to test and when.
  # It is expected that Flowzone could fail, but yocto jobs will run.
  pull_request:
    branches:
      - "main"
      - "master"
  pull_request_target:
    branches:
      - "main"
      - "master"
  # Enable this push trigger on device repos
  # push:
  #   tags:
  #     - v[0-9]+.[0-9]+.[0-9]+\+?r?e?v?*
  #     - v20[0-9][0-9].[0-1]?[1470].[0-9]+
  # Enable this push trigger on device repos
  # workflow_dispatch:

jobs:
  yocto:
    name: Yocto
    uses: ./.github/workflows/yocto-build-deploy.yml
    # Prevent duplicate workflow executions for pull_request (PR) and pull_request_target (PRT) events.
    # Both PR and PRT will be triggered for the same pull request, whether it is internal or from a fork.
    # This condition will prevent the workflow from running twice for the same pull request.
    # Condition 1: pull request is NOT from a fork, and the event type is NOT pull_request_target (e.g. push, pull_request, etc.)
    # OR Condition 2: pull request is from a fork, and the event type must be pull_request_target.
    # There should be no cases where both are true.
    if: |
      (
        github.event.pull_request.head.repo.full_name == github.repository &&
        github.event_name == 'pull_request'
      ) || (
        github.event.pull_request.head.repo.full_name != github.repository &&
        github.event_name == 'pull_request_target'
      )
    secrets: inherit
    with:
      machine: generic-amd64
      environment: balena-staging.com
      # device-repo and device-repo-ref inputs should not be provided on device repos
      device-repo: balena-os/balena-generic
      device-repo-ref: master
      # Use qemu workers for testing
      test_matrix: >
        [
          {
            "test_suite": "os",
            "environment": "bm.balena-dev.com",
            "worker_type": "qemu"
          },
          {
            "test_suite": "cloud",
            "environment": "bm.balena-dev.com",
            "worker_type": "qemu",
            "test_org": "testbot"
          },
          {
            "test_suite": "hup",
            "environment": "bm.balena-dev.com",
            "worker_type": "qemu"
          },
        ]
